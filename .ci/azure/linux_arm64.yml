resources:
  repositories:
  - repository: openvino_contrib
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino_contrib

jobs:
- job: linux_arm64
  # About 150% of total time
  timeoutInMinutes: 120

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    OPENVINO_REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_CONTRIB_REPO_DIR: $(OPENVINO_REPO_DIR)/../openvino_contrib
    OPENCV_REPO_DIR: $(OPENVINO_REPO_DIR)/../opencv
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR: $(WORK_DIR)/build
    BUILD_DIR_OPENCV: $(WORK_DIR)/build_opencv
    TMP_DIR: /mnt/tmp
    SHARE_DIR: /mount/cinfsshare/onnxtestdata
    CCACHE_DIR: $(SHARE_DIR)/ccache/master/linux_arm64

  steps:
  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
    displayName: 'System information'

  - script: |
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR) ; mkdir $(BUILD_DIR)
      sudo rm -rf $(TMP_DIR) ; sudo mkdir $(TMP_DIR) ; sudo chmod 777 -R $(TMP_DIR)
      sudo mkdir -p $(SHARE_DIR)
      sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
      sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(SHARE_DIR) -o vers=4,minorversion=1,sec=sys
      mkdir -p $(CCACHE_DIR)
    displayName: 'Make directory'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - checkout: openvino_contrib
    clean: true
    lfs: false
    submodules: recursive
    path: openvino_contrib

  - script: |
      set -e
      $(OPENVINO_REPO_DIR)/install_build_dependencies.sh
      # Move into contrib install_build_dependencies.sh
      sudo apt --assume-yes install scons crossbuild-essential-arm64 libprotoc-dev protobuf-compiler
      # OpenCV should provide install_build_dependencies.sh as well
      # Move into resources
      git clone https://github.com/opencv/opencv.git --depth 1 $(OPENCV_REPO_DIR)
      # Speed up build
      wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
      unzip ninja-linux.zip
      sudo cp -v ninja /usr/local/bin/
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DBUILD_LIST=imgcodecs,videoio,highgui
        -DCMAKE_TOOLCHAIN_FILE=$(OPENCV_REPO_DIR)/platforms/linux/aarch64-gnu.toolchain.cmake
        $(OPENCV_REPO_DIR)
      workingDirectory: $(BUILD_DIR_OPENCV)

  - script: ninja
    workingDirectory: $(BUILD_DIR_OPENCV)
    displayName: 'Build OpenCV Linux ARM64'

  - script: ninja install
    workingDirectory: $(BUILD_DIR_OPENCV)
    displayName: 'Install OpenCV Linux ARM64'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DCMAKE_TOOLCHAIN_FILE=$(OPENVINO_REPO_DIR)/cmake/arm64.toolchain.cmake
        -DOpenCV_DIR=$(BUILD_DIR_OPENCV)/install/lib/cmake/opencv4
        -DENABLE_OPENCV=OFF
        -DENABLE_TESTS=ON
        -DENABLE_SAMPLES=ON
        -DBUILD_java_api=OFF
        -DENABLE_INTEL_VPU=OFF
        -DTHREADING=SEQ
        -DIE_EXTRA_MODULES=$(OPENVINO_CONTRIB_REPO_DIR)/modules
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        $(OPENVINO_REPO_DIR)
      workingDirectory: $(BUILD_DIR)

  - script: ls -alR $(OPENVINO_REPO_DIR)/temp/
    displayName: 'List temp SDKs'

  - script: ccache --zero-stats --max-size=50G --show-config
    displayName: 'Clean ccache stats'

  - script: |
      export CCACHE_DIR=$(CCACHE_DIR)
      export CCACHE_TEMPDIR=$(TMP_DIR)/ccache
      export CCACHE_BASEDIR=$(Pipeline.Workspace)
      export CCACHE_MAXSIZE=50G
      ninja
    workingDirectory: $(BUILD_DIR)
    displayName: 'Build Linux ARM64'

  - script: ccache --show-stats
    displayName: 'Show ccache stats'

  - script: ls -alR $(OPENVINO_REPO_DIR)/bin/
    displayName: 'List binary files'
