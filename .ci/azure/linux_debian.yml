trigger:
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - docs/
    - /**/docs/*
    - /**/*.md
    - README.md
    - /**/layer_tests_summary/**

pr:
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - docs/
    - /**/docs/*
    - /**/*.md
    - README.md
    - /**/layer_tests_summary/**

resources:
  repositories:
  - repository: openvino_contrib
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino_contrib
    ref: master

  - repository: testdata
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/testdata
    ref: master

jobs:
- job: Lin_Debian
  # About 150% of total time
  timeoutInMinutes: 120

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_CONTRIB_REPO_DIR: $(REPO_DIR)/../openvino_contrib
    MODELS_PATH: $(REPO_DIR)/../testdata
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR: $(WORK_DIR)/build
    BUILD_SAMPLES_DIR: $(WORK_DIR)/build_samples
    BUILD_LAYER_TESTS_DIR: $(WORK_DIR)/build_layer_tests
    BUILD_SAMPLES_TESTS_DIR: $(WORK_DIR)/build_samples_tests
    INSTALL_DIR: $(WORK_DIR)/install_pkg
    INSTALL_TEST_DIR: $(INSTALL_DIR)/tests
    LAYER_TESTS_DIR: $(INSTALL_TEST_DIR)/layer_tests
    SAMPLES_INSTALL_DIR: /usr/share/openvino/samples
    PYTHON_SAMPLES_INSTALL_DIR: $(INSTALL_DIR)/share/openvino/samples/python
    PYTHON_WHEEL_INSTALL_DIR: $HOME/.local/lib/python3.8/site-packages
    TMP_DIR: /mnt/tmp
    SHARE_DIR: /mount/cinfsshare/onnxtestdata
    CCACHE_DIR: $(SHARE_DIR)/ccache/master/linux

  steps:
  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
      echo TargetBranch: $(System.PullRequest.TargetBranch)
      echo SourceBranch: $(Build.SourceBranch)
    displayName: 'System info'

  - script: |
      set -e
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR) ; mkdir $(BUILD_DIR)
      rm -rf $(BUILD_SAMPLES_DIR) ; mkdir $(BUILD_SAMPLES_DIR)
      sudo rm -rf $(TMP_DIR) ; sudo mkdir $(TMP_DIR) ; sudo chmod 777 -R $(TMP_DIR)
      sudo mkdir -p $(SHARE_DIR)
      sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
      sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(SHARE_DIR) -o vers=4,minorversion=1,sec=sys
      mkdir -p $(CCACHE_DIR)
    displayName: 'Make dir'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - checkout: openvino_contrib
    clean: true
    lfs: false
    submodules: recursive
    path: openvino_contrib

  - script: |
      set -e
      sudo -E $(REPO_DIR)/install_build_dependencies.sh
      # Move jdk into contrib
      # 'clang' compiler is to check that samples can be built using it
      sudo apt --assume-yes install openjdk-11-jdk clang
      sudo apt --assume-yes install --no-install-recommends libopencv-imgproc-dev libopencv-imgcodecs-dev
      # For opencv-python: python3-setuptools and pip upgrade
      python3 -m pip install --upgrade pip
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/wheel/requirements-dev.txt
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/requirements.txt
      # For running Python API tests
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
      # For running Paddle frontend unit tests
      python3 -m pip install -r $(REPO_DIR)/src/frontends/paddle/tests/requirements.txt
      # For running ONNX frontend unit tests
      python3 -m pip install -r $(REPO_DIR)/src/frontends/onnx/tests/requirements.txt
      # For running TensorFlow frontend unit tests
      python3 -m pip install -r $(REPO_DIR)/src/frontends/tensorflow/tests/requirements.txt
      # For MO unit tests
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements.txt
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_dev.txt
      # Speed up build
      wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
      unzip ninja-linux.zip
      sudo cp -v ninja /usr/local/bin/
      # Speed up tests
      git clone https://github.com/google/gtest-parallel.git
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

    # Should be after 'Install dependencies' because Git lfs is not installed
  - checkout: testdata
    clean: true
    lfs: true
    path: testdata

  - task: CMake@1
    inputs:
      # CMake must get Python 3.x version by default
      cmakeArgs: >
        -GNinja
        -DCMAKE_VERBOSE_MAKEFILE=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
        -DENABLE_PYTHON=ON
        -DENABLE_OPENCV=OFF
        -DPYTHON_EXECUTABLE=/usr/bin/python3.8
        -DENABLE_TESTS=ON
        -DENABLE_FASTER_BUILD=ON
        -DENABLE_STRICT_DEPENDENCIES=OFF
        -DENABLE_REQUIREMENTS_INSTALL=OFF
        -DOPENVINO_EXTRA_MODULES=$(OPENVINO_CONTRIB_REPO_DIR)/modules
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DCMAKE_CXX_LINKER_LAUNCHER=ccache
        -DCMAKE_C_LINKER_LAUNCHER=ccache
        -DCPACK_GENERATOR=DEB
        -DBUILD_nvidia_plugin=OFF
        -S $(REPO_DIR)
        -B $(BUILD_DIR)

  - script: ls -alR $(REPO_DIR)/temp/
    displayName: 'List temp SDKs'

  - script: ccache --zero-stats --max-size=50G --show-config
    displayName: 'Clean ccache stats'

  - script: |
      export CCACHE_DIR=$(CCACHE_DIR)
      export CCACHE_TEMPDIR=$(TMP_DIR)/ccache
      export CCACHE_BASEDIR=$(Pipeline.Workspace)
      export CCACHE_MAXSIZE=50G
      ninja -C $(BUILD_DIR)
    displayName: 'Build Lin'

  - script: ccache --show-stats
    displayName: 'Show ccache stats'

  - script: ls -alR $(REPO_DIR)/bin/
    displayName: 'List bin files'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -S $(REPO_DIR)/tests/layer_tests
        -B $(BUILD_LAYER_TESTS_DIR)

  - script: ninja -C $(BUILD_LAYER_TESTS_DIR)
    displayName: 'Build Layer Tests'

  - script: sudo apt-get remove libtbb2 libpugixml1v5 -y
    displayName: 'Remove debian dependencies'
    continueOnError: false

  - script: cmake -DCOMPONENT=python_wheels -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_DIR)/cmake_install.cmake
    displayName: 'Install wheel packages'

  - script: cmake -DCOMPONENT=python_samples -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_DIR)/cmake_install.cmake
    displayName: 'Install Python Samples'

  - script: cmake -DCOMPONENT=gna -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_DIR)/cmake_install.cmake
    displayName: 'Install GNA plugin'

  - script: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_LAYER_TESTS_DIR)/cmake_install.cmake
    displayName: 'Install Layer Tests'

  - script: python3 -m pip install openvino-dev --find-links=$(INSTALL_DIR)/tools
    displayName: 'Install python wheels'

  - script: cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DCOMPONENT=tests -P $(BUILD_DIR)/cmake_install.cmake
    displayName: 'Install tests'

  - script: ls -alR $(INSTALL_DIR)
    displayName: 'List install test files'

    # Skip test_onnx/test_zoo_models and test_onnx/test_backend due to long execution time
  - script: |
      python3 -m pytest -s $(INSTALL_TEST_DIR)/pyngraph \
        --junitxml=$(INSTALL_TEST_DIR)/TEST-Pyngraph.xml \
        --ignore=$(INSTALL_TEST_DIR)/pyngraph/tests/test_onnx/test_zoo_models.py \
        --ignore=$(INSTALL_TEST_DIR)/pyngraph/tests/test_onnx/test_backend.py
    displayName: 'nGraph and IE Python Bindings Tests'
    continueOnError: false

    # Skip test_onnx/test_zoo_models and test_onnx/test_backend due to long execution time
  - script: |
      # Required by python imports to load requires libraries
      # - tests install dir for mock_py
      # - OpenVINO wheel installation dir for others frontend required by mock_py (is not part of wheel pkg)
      export LD_LIBRARY_PATH=$(PYTHON_WHEEL_INSTALL_DIR)/openvino/libs:$(INSTALL_TEST_DIR):$LD_LIBRARY_PATH
      # For frontend manager to load frontend libraries:
      # - tests install dir for mock_py
      # - OpenVINO wheel installation dir for others frontend (not required if this variable is not set)
      export OV_FRONTEND_PATH=$(PYTHON_WHEEL_INSTALL_DIR)/openvino/libs:$(INSTALL_TEST_DIR)
      # For python imports to import pybind_mock_frontend
      export PYTHONPATH=$(INSTALL_TEST_DIR):$PYTHONPATH
      python3 -m pytest -s $(INSTALL_TEST_DIR)/pyopenvino \
        --junitxml=$(INSTALL_TEST_DIR)/TEST-Pyngraph.xml \
        --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_utils/test_utils.py \
        --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_onnx/test_zoo_models.py \
        --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_onnx/test_backend.py -v
    displayName: 'Python API 2.0 Tests'
    continueOnError: false

  - script: python3 -m pytest -s $(INSTALL_TEST_DIR)/mo/unit_tests --junitxml=$(INSTALL_TEST_DIR)/TEST-ModelOptimizer.xml
    displayName: 'Model Optimizer UT'
    continueOnError: false

  - script: |
      sudo apt-get install libtbb-dev libpugixml-dev -y
      cmake --build $(BUILD_DIR) --target package -j8
    displayName: 'Build Debian packages'
    continueOnError: false

  - script: |
      # install debian packages from previous release
      wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      sudo apt-get install --no-install-recommends gnupg -y
      echo "deb https://apt.repos.intel.com/openvino/2022 focal main" | sudo tee /etc/apt/sources.list.d/intel-openvino-2022.list
      sudo apt-get update -o Dir::Etc::sourcelist=/etc/apt/sources.list.d/intel-openvino-2022.list
      sudo apt-get install openvino -y
      # install our local one and make sure the conflicts are resolved
      sudo apt-get install --no-install-recommends dpkg-dev -y
      rm -r _CPack_Packages
      dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
      echo "deb [trusted=yes] file:$(BUILD_DIR) ./" | sudo tee /etc/apt/sources.list.d/openvino-local.list
      sudo apt-get update -o Dir::Etc::sourcelist=/etc/apt/sources.list.d/openvino-local.list
      sudo apt-get install openvino -y
    workingDirectory: $(BUILD_DIR)
    displayName: 'Install Debian packages'
    continueOnError: false

  - script: ls -alR $(INSTALL_DIR)
    displayName: 'List install files'

  - script: rm -fr $(BUILD_DIR)
    displayName: 'Clean build dir'
    continueOnError: false

  - script: $(SAMPLES_INSTALL_DIR)/cpp/build_samples.sh -i $(INSTALL_DIR)
    displayName: 'Build cpp samples'
    continueOnError: false

  - script: |
      export CC=clang
      export CXX=clang++
      $(SAMPLES_INSTALL_DIR)/cpp/build_samples.sh -i $(INSTALL_DIR)
    displayName: 'Build cpp samples - clang'
    continueOnError: false

  - script: $(SAMPLES_INSTALL_DIR)/c/build_samples.sh -i $(INSTALL_DIR)
    displayName: 'Build c samples'
    continueOnError: false

  - script: |
      export LD_LIBRARY_PATH=$(INSTALL_TEST_DIR):$LD_LIBRARY_PATH
      $(INSTALL_TEST_DIR)/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-NGraphUT.xml
    displayName: 'OV Core UT'
    continueOnError: false

  - script: |
      export LD_LIBRARY_PATH=$(INSTALL_TEST_DIR)
      $(INSTALL_TEST_DIR)/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ONNXFrontend.xml
    displayName: 'ONNX Frontend Tests'
    continueOnError: false

  - script: |
      export LD_LIBRARY_PATH=$(INSTALL_TEST_DIR)
      $(INSTALL_TEST_DIR)/paddle_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-Paddle.xml
    displayName: 'Paddle Frontend UT'
    continueOnError: false

  - script: |
      export LD_LIBRARY_PATH=$(INSTALL_TEST_DIR)
      $(INSTALL_TEST_DIR)/ov_tensorflow_frontend_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-Tensorflow.xml
    displayName: 'TensorFlow Frontend Unit Tests'
    continueOnError: false

    # python3 $(WORK_DIR)/gtest-parallel/gtest_parallel.py $(INSTALL_TEST_DIR)/InferenceEngineUnitTests --workers=16 --dump_json_test_results=InferenceEngineUnitTests.json --gtest_filter=*smoke* -- --gtest_print_time=1
  - script: $(INSTALL_TEST_DIR)/InferenceEngineUnitTests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceEngineUnitTests.xml
    displayName: 'IE UT old'
    continueOnError: false

  - script: $(INSTALL_TEST_DIR)/ieUnitTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ieUnitTests.xml
    displayName: 'IE UT'
    continueOnError: false

  - script: $(INSTALL_TEST_DIR)/ov_cpu_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_cpu_unit_tests.xml
    displayName: 'Intel CPU Unit Tests'
    continueOnError: false

  - script: $(INSTALL_TEST_DIR)/ov_gna_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_gna_unit_tests.xml
    displayName: 'GNA UT'
    continueOnError: false

  - script: $(INSTALL_TEST_DIR)/vpuUnitTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-vpuUnitTests.xml
    displayName: 'VPU UT'
    continueOnError: false

  - script: $(INSTALL_TEST_DIR)/XLinkTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-XLinkTests.xml
    displayName: 'XLink Tests'
    continueOnError: false

  - script: $(INSTALL_TEST_DIR)/ieMultiPluginUnitTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ieMultiPluginUnitTests.xml
    displayName: 'MULTI UT'
    continueOnError: false

  - script: |
      # because of IR reader v7
      export LD_LIBRARY_PATH=$(INSTALL_TEST_DIR)
      $(INSTALL_TEST_DIR)/ieFuncTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ieFuncTests.xml
    displayName: 'IE FuncTests'
    continueOnError: false

  - script:  |
      export LD_LIBRARY_PATH=$(INSTALL_TEST_DIR):$LD_LIBRARY_PATH
      $(INSTALL_TEST_DIR)/ov_template_func_tests --gtest_filter=*smoke* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-templateFuncTests.xml
    displayName: 'TEMPLATE FuncTests'
    continueOnError: false

  # run not all smoke filter to save time in post-commit
  - script: $(INSTALL_TEST_DIR)/ov_cpu_func_tests --gtest_filter=*OVCLass*:*CoreThreadingTests* --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_cpu_func_tests.xml
    displayName: 'CPU FuncTests'
    continueOnError: false

  - script: |
      export DATA_PATH=$(MODELS_PATH)
      export MODELS_PATH=$(MODELS_PATH)
      $(INSTALL_TEST_DIR)/InferenceEngineCAPITests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceEngineCAPITests.xml
    displayName: 'IE CAPITests'
    continueOnError: false

  - script: |
      export DATA_PATH=$(MODELS_PATH)
      export MODELS_PATH=$(MODELS_PATH)
      $(INSTALL_TEST_DIR)/ov_capi_test --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_capi_test.xml
    displayName: 'OV CAPITests'
    continueOnError: false

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -S $(REPO_DIR)/tests/samples_tests
        -B $(BUILD_SAMPLES_TESTS_DIR)

  - script: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_SAMPLES_TESTS_DIR)/cmake_install.cmake
    displayName: 'Install Samples Tests'

  - script: python3 -m pip install -r $(INSTALL_TEST_DIR)/smoke_tests/requirements.txt
    displayName: 'Install dependencies for samples smoke tests'
    continueOnError: false

  - script: |
      export PATH=$HOME/.local/bin:$PATH
      export IE_APP_PATH=$(INSTALL_DIR)/samples_bin
      export LD_LIBRARY_PATH=$IE_APP_PATH:$LD_LIBRARY_PATH
      # for gna plugin
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(INSTALL_DIR)/lib/x86_64-linux-gnu:$(INSTALL_DIR)/lib/x86_64-linux-gnu/openvino-2022.3.0
      export IE_APP_PYTHON_PATH=$(PYTHON_SAMPLES_INSTALL_DIR)/
      export SHARE=$(INSTALL_TEST_DIR)/smoke_tests/samples_smoke_tests_data/
      export WORKSPACE=$(INSTALL_DIR)
      python3 -m pytest $(INSTALL_TEST_DIR)/smoke_tests/  --env_conf $(INSTALL_TEST_DIR)/smoke_tests/env_config.yml -s --junitxml=$(INSTALL_TEST_DIR)/TEST-SamplesSmokeTests.xml
    displayName: 'Samples Smoke Tests'
    continueOnError: false

  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      export PYTHONPATH=$(LAYER_TESTS_DIR):$PYTHONPATH
      python3 -m pytest $(LAYER_TESTS_DIR)/tensorflow_tests/test_tf_Roll.py --ir_version=10 --junitxml=$(INSTALL_TEST_DIR)/TEST-tf_Roll.xmlTEST
    displayName: 'TensorFlow 1 Layer Tests - Legacy FE'
    continueOnError: false

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/TEST-*.xml'
      #searchFolder: '$(BUILD_DIR)'
      mergeTestResults: false # Optional
      #failTaskOnFailedTests: false # Optional
      #testRunTitle: 'Pre/Post-Commit' # Optional
      buildPlatform: 'x64' # Optional
      buildConfiguration: 'Linux' # Optional
      #publishRunAttachments: true # Optional
